syntax = "proto3";

package iotpb;

///////////////////// message dispatcher service //////////////////////////////
message MessageHeader {
    bool retain = 1;
    int32 qos = 2;
    bool dup = 3;
    uint32 type = 4;
}

message SubscribeOptions {
    int32 noLocal = 1;
    int32 retainAsPublished = 2;
    int32 retainHandling = 3;
}

message SubscribeMessageRequest {
    SubscribeOptions header = 1;
    string topicFilter = 2;
    int32 qos = 3;
    int32 msgId = 4;
    map<string, string> properties = 5;
}

message SubscribeMessageResponse {
    int32 msgId = 1;
    uint32 topicId = 2;
    int32 code = 3;
    string message = 4;
}

message UnSubscribeMessageRequest {
    string topicFilter = 1;
}

message UnSubscribeMessageResponse {
    int32 code = 1;
    string message = 2;
}

message PublishMessageRequest {
    MessageHeader header = 100;

    string topic = 1;
    int32 msgId = 2;
    int32 mqttVersion = 3;
    map<string, string> properties = 4;
    bytes payload = 5;
}

message PublishMessageResponse {
    int32 msgId = 1;
    int32 code = 2;
    string message = 3;
}

service MessageDispatcher {
	rpc PublishMessage(PublishMessageRequest) returns (PublishMessageResponse) {}
    rpc Subscribe(SubscribeMessageRequest) returns (SubscribeMessageResponse) {}
    rpc UnSubscribe(UnSubscribeMessageRequest) returns (UnSubscribeMessageResponse) {}
}

///////////////////// publish engine service //////////////////////////////
service PublishEngine {
    rpc PublishMessage(PublishMessageRequest) returns (PublishMessageResponse) {}
}

///////////////////// topic manager service //////////////////////////////
message SubTopicIdRange {
    uint32 begin = 1;
    uint32 end = 2;
}

message SubTopicLoadRequest{
    string productKey = 1;
    repeated SubTopicIdRange subTopicIdRange = 2;
}

message SubTopicLoadResponse{
    int32 code = 1;
    string message = 2;
}

service TopicManager {
    rpc PublishMessage(PublishMessageRequest) returns (PublishMessageResponse) {}
    rpc LoadSubTopic(SubTopicLoadRequest) returns (SubTopicLoadResponse) {}
}

///////////////////// registry service //////////////////////////////
message ConnectMessageRequest {
    MessageHeader header = 100;
    string username = 1;
    string password = 2;
    bool willRetain = 3;
    bool will = 4;
    bool cleanStart = 5;
    uint32 willQoS = 6;
    string willTopic = 7;
    string clientId = 8;
    string willMsg = 9;
}

message ConnectMessageResponse {
    int32 code = 1;
    string message = 2;
}

service RegistryManager {
    rpc Registry(ConnectMessageRequest) returns (ConnectMessageResponse) {}
}

///////////////////// topic acl service //////////////////////////////
///////////////////// publish acl service //////////////////////////////
