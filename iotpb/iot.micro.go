// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot.proto

package iotpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MessageDispatcher service

type MessageDispatcherService interface {
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...client.CallOption) (*PublishMessageResponse, error)
	Subscribe(ctx context.Context, in *SubscribeMessageRequest, opts ...client.CallOption) (*SubscribeMessageResponse, error)
	UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, opts ...client.CallOption) (*UnSubscribeMessageResponse, error)
}

type messageDispatcherService struct {
	c    client.Client
	name string
}

func NewMessageDispatcherService(name string, c client.Client) MessageDispatcherService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iotpb"
	}
	return &messageDispatcherService{
		c:    c,
		name: name,
	}
}

func (c *messageDispatcherService) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...client.CallOption) (*PublishMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MessageDispatcher.PublishMessage", in)
	out := new(PublishMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDispatcherService) Subscribe(ctx context.Context, in *SubscribeMessageRequest, opts ...client.CallOption) (*SubscribeMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MessageDispatcher.Subscribe", in)
	out := new(SubscribeMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDispatcherService) UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, opts ...client.CallOption) (*UnSubscribeMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MessageDispatcher.UnSubscribe", in)
	out := new(UnSubscribeMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageDispatcher service

type MessageDispatcherHandler interface {
	PublishMessage(context.Context, *PublishMessageRequest, *PublishMessageResponse) error
	Subscribe(context.Context, *SubscribeMessageRequest, *SubscribeMessageResponse) error
	UnSubscribe(context.Context, *UnSubscribeMessageRequest, *UnSubscribeMessageResponse) error
}

func RegisterMessageDispatcherHandler(s server.Server, hdlr MessageDispatcherHandler, opts ...server.HandlerOption) error {
	type messageDispatcher interface {
		PublishMessage(ctx context.Context, in *PublishMessageRequest, out *PublishMessageResponse) error
		Subscribe(ctx context.Context, in *SubscribeMessageRequest, out *SubscribeMessageResponse) error
		UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, out *UnSubscribeMessageResponse) error
	}
	type MessageDispatcher struct {
		messageDispatcher
	}
	h := &messageDispatcherHandler{hdlr}
	return s.Handle(s.NewHandler(&MessageDispatcher{h}, opts...))
}

type messageDispatcherHandler struct {
	MessageDispatcherHandler
}

func (h *messageDispatcherHandler) PublishMessage(ctx context.Context, in *PublishMessageRequest, out *PublishMessageResponse) error {
	return h.MessageDispatcherHandler.PublishMessage(ctx, in, out)
}

func (h *messageDispatcherHandler) Subscribe(ctx context.Context, in *SubscribeMessageRequest, out *SubscribeMessageResponse) error {
	return h.MessageDispatcherHandler.Subscribe(ctx, in, out)
}

func (h *messageDispatcherHandler) UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, out *UnSubscribeMessageResponse) error {
	return h.MessageDispatcherHandler.UnSubscribe(ctx, in, out)
}

// Client API for PublishEngine service

type PublishEngineService interface {
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...client.CallOption) (*PublishMessageResponse, error)
}

type publishEngineService struct {
	c    client.Client
	name string
}

func NewPublishEngineService(name string, c client.Client) PublishEngineService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iotpb"
	}
	return &publishEngineService{
		c:    c,
		name: name,
	}
}

func (c *publishEngineService) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...client.CallOption) (*PublishMessageResponse, error) {
	req := c.c.NewRequest(c.name, "PublishEngine.PublishMessage", in)
	out := new(PublishMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PublishEngine service

type PublishEngineHandler interface {
	PublishMessage(context.Context, *PublishMessageRequest, *PublishMessageResponse) error
}

func RegisterPublishEngineHandler(s server.Server, hdlr PublishEngineHandler, opts ...server.HandlerOption) error {
	type publishEngine interface {
		PublishMessage(ctx context.Context, in *PublishMessageRequest, out *PublishMessageResponse) error
	}
	type PublishEngine struct {
		publishEngine
	}
	h := &publishEngineHandler{hdlr}
	return s.Handle(s.NewHandler(&PublishEngine{h}, opts...))
}

type publishEngineHandler struct {
	PublishEngineHandler
}

func (h *publishEngineHandler) PublishMessage(ctx context.Context, in *PublishMessageRequest, out *PublishMessageResponse) error {
	return h.PublishEngineHandler.PublishMessage(ctx, in, out)
}

// Client API for TopicManager service

type TopicManagerService interface {
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...client.CallOption) (*PublishMessageResponse, error)
	LoadSubTopic(ctx context.Context, in *SubTopicLoadRequest, opts ...client.CallOption) (*SubTopicLoadResponse, error)
	Subscribe(ctx context.Context, in *SubscribeMessageRequest, opts ...client.CallOption) (*SubscribeMessageResponse, error)
	UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, opts ...client.CallOption) (*UnSubscribeMessageResponse, error)
}

type topicManagerService struct {
	c    client.Client
	name string
}

func NewTopicManagerService(name string, c client.Client) TopicManagerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iotpb"
	}
	return &topicManagerService{
		c:    c,
		name: name,
	}
}

func (c *topicManagerService) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...client.CallOption) (*PublishMessageResponse, error) {
	req := c.c.NewRequest(c.name, "TopicManager.PublishMessage", in)
	out := new(PublishMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicManagerService) LoadSubTopic(ctx context.Context, in *SubTopicLoadRequest, opts ...client.CallOption) (*SubTopicLoadResponse, error) {
	req := c.c.NewRequest(c.name, "TopicManager.LoadSubTopic", in)
	out := new(SubTopicLoadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicManagerService) Subscribe(ctx context.Context, in *SubscribeMessageRequest, opts ...client.CallOption) (*SubscribeMessageResponse, error) {
	req := c.c.NewRequest(c.name, "TopicManager.Subscribe", in)
	out := new(SubscribeMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicManagerService) UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, opts ...client.CallOption) (*UnSubscribeMessageResponse, error) {
	req := c.c.NewRequest(c.name, "TopicManager.UnSubscribe", in)
	out := new(UnSubscribeMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TopicManager service

type TopicManagerHandler interface {
	PublishMessage(context.Context, *PublishMessageRequest, *PublishMessageResponse) error
	LoadSubTopic(context.Context, *SubTopicLoadRequest, *SubTopicLoadResponse) error
	Subscribe(context.Context, *SubscribeMessageRequest, *SubscribeMessageResponse) error
	UnSubscribe(context.Context, *UnSubscribeMessageRequest, *UnSubscribeMessageResponse) error
}

func RegisterTopicManagerHandler(s server.Server, hdlr TopicManagerHandler, opts ...server.HandlerOption) error {
	type topicManager interface {
		PublishMessage(ctx context.Context, in *PublishMessageRequest, out *PublishMessageResponse) error
		LoadSubTopic(ctx context.Context, in *SubTopicLoadRequest, out *SubTopicLoadResponse) error
		Subscribe(ctx context.Context, in *SubscribeMessageRequest, out *SubscribeMessageResponse) error
		UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, out *UnSubscribeMessageResponse) error
	}
	type TopicManager struct {
		topicManager
	}
	h := &topicManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&TopicManager{h}, opts...))
}

type topicManagerHandler struct {
	TopicManagerHandler
}

func (h *topicManagerHandler) PublishMessage(ctx context.Context, in *PublishMessageRequest, out *PublishMessageResponse) error {
	return h.TopicManagerHandler.PublishMessage(ctx, in, out)
}

func (h *topicManagerHandler) LoadSubTopic(ctx context.Context, in *SubTopicLoadRequest, out *SubTopicLoadResponse) error {
	return h.TopicManagerHandler.LoadSubTopic(ctx, in, out)
}

func (h *topicManagerHandler) Subscribe(ctx context.Context, in *SubscribeMessageRequest, out *SubscribeMessageResponse) error {
	return h.TopicManagerHandler.Subscribe(ctx, in, out)
}

func (h *topicManagerHandler) UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, out *UnSubscribeMessageResponse) error {
	return h.TopicManagerHandler.UnSubscribe(ctx, in, out)
}

// Client API for RegistryManager service

type RegistryManagerService interface {
	Registry(ctx context.Context, in *ConnectMessageRequest, opts ...client.CallOption) (*ConnectMessageResponse, error)
}

type registryManagerService struct {
	c    client.Client
	name string
}

func NewRegistryManagerService(name string, c client.Client) RegistryManagerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iotpb"
	}
	return &registryManagerService{
		c:    c,
		name: name,
	}
}

func (c *registryManagerService) Registry(ctx context.Context, in *ConnectMessageRequest, opts ...client.CallOption) (*ConnectMessageResponse, error) {
	req := c.c.NewRequest(c.name, "RegistryManager.Registry", in)
	out := new(ConnectMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegistryManager service

type RegistryManagerHandler interface {
	Registry(context.Context, *ConnectMessageRequest, *ConnectMessageResponse) error
}

func RegisterRegistryManagerHandler(s server.Server, hdlr RegistryManagerHandler, opts ...server.HandlerOption) error {
	type registryManager interface {
		Registry(ctx context.Context, in *ConnectMessageRequest, out *ConnectMessageResponse) error
	}
	type RegistryManager struct {
		registryManager
	}
	h := &registryManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&RegistryManager{h}, opts...))
}

type registryManagerHandler struct {
	RegistryManagerHandler
}

func (h *registryManagerHandler) Registry(ctx context.Context, in *ConnectMessageRequest, out *ConnectMessageResponse) error {
	return h.RegistryManagerHandler.Registry(ctx, in, out)
}

// Client API for TopicAcl service

type TopicAclService interface {
	Subscribe(ctx context.Context, in *SubscribeMessageRequest, opts ...client.CallOption) (*SubscribeMessageResponse, error)
	UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, opts ...client.CallOption) (*UnSubscribeMessageResponse, error)
}

type topicAclService struct {
	c    client.Client
	name string
}

func NewTopicAclService(name string, c client.Client) TopicAclService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iotpb"
	}
	return &topicAclService{
		c:    c,
		name: name,
	}
}

func (c *topicAclService) Subscribe(ctx context.Context, in *SubscribeMessageRequest, opts ...client.CallOption) (*SubscribeMessageResponse, error) {
	req := c.c.NewRequest(c.name, "TopicAcl.Subscribe", in)
	out := new(SubscribeMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicAclService) UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, opts ...client.CallOption) (*UnSubscribeMessageResponse, error) {
	req := c.c.NewRequest(c.name, "TopicAcl.UnSubscribe", in)
	out := new(UnSubscribeMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TopicAcl service

type TopicAclHandler interface {
	Subscribe(context.Context, *SubscribeMessageRequest, *SubscribeMessageResponse) error
	UnSubscribe(context.Context, *UnSubscribeMessageRequest, *UnSubscribeMessageResponse) error
}

func RegisterTopicAclHandler(s server.Server, hdlr TopicAclHandler, opts ...server.HandlerOption) error {
	type topicAcl interface {
		Subscribe(ctx context.Context, in *SubscribeMessageRequest, out *SubscribeMessageResponse) error
		UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, out *UnSubscribeMessageResponse) error
	}
	type TopicAcl struct {
		topicAcl
	}
	h := &topicAclHandler{hdlr}
	return s.Handle(s.NewHandler(&TopicAcl{h}, opts...))
}

type topicAclHandler struct {
	TopicAclHandler
}

func (h *topicAclHandler) Subscribe(ctx context.Context, in *SubscribeMessageRequest, out *SubscribeMessageResponse) error {
	return h.TopicAclHandler.Subscribe(ctx, in, out)
}

func (h *topicAclHandler) UnSubscribe(ctx context.Context, in *UnSubscribeMessageRequest, out *UnSubscribeMessageResponse) error {
	return h.TopicAclHandler.UnSubscribe(ctx, in, out)
}
